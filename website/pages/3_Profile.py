import os
import streamlit as st
import requests
from check_access import check_access_allowed
from sidebar import sidebar
import cookies

def toggle_configuration(jwt, config):
    user_configuration = {}

    api_endpoint = os.getenv("API_ENDPOINT") + f'/configuration/toggle-configured-{config}'

    try:
        response = requests.post(api_endpoint, headers = {"Authorization": f"Bearer {jwt}"})
        resp = response.json()

        if response.status_code == 200:
            user_configuration = resp
        
        else:
            errors = resp["message"]

            if type(errors) == list:
                for er in errors:
                    st.error(er)
            else:
                st.error(errors)
            st.error("Request failed. Please try again.")

        return user_configuration

    except Exception as e:
        print("Error occurred during API call:", e)
        st.error("Error ocurred. Please try again.")

def get_profile_info(jwt):
    profile_info = {}

    api_endpoint = os.getenv("API_ENDPOINT") + '/users/me'

    try:
        response = requests.get(api_endpoint, headers = {"Authorization": f"Bearer {jwt}"})
        resp = response.json()

        if response.status_code == 200:
            profile_info = resp
        
        else:
            errors = resp["message"]

            if type(errors) == list:
                for er in errors:
                    st.error(er)
            else:
                st.error(errors)
            st.error("Request failed. Please try again.")

        return profile_info

    except Exception as e:
        print("Error occurred during API call:", e)
        st.error("Error ocurred. Please try again.")

def get_user_configuration(jwt):
    user_configuration = {}

    api_endpoint = os.getenv("API_ENDPOINT") + '/configuration/my-config'

    try:
        response = requests.get(api_endpoint, headers = {"Authorization": f"Bearer {jwt}"})
        resp = response.json()

        if response.status_code == 200:
            user_configuration = resp
        
        else:
            errors = resp["message"]

            if type(errors) == list:
                for er in errors:
                    st.error(er)
            else:
                st.error(errors)
            st.error("Request failed. Please try again.")

        return user_configuration

    except Exception as e:
        print("Error occurred during API call:", e)
        st.error("Error ocurred. Please try again.")

def toggle_yara():
    toggle_configuration(cookies.cookie_manager.getJWTCookieValue(), "yara")

def toggle_fuzzy_hashing():
    toggle_configuration(cookies.cookie_manager.getJWTCookieValue(), "fuzzy-hashing")

def toggle_import_hashing():
    toggle_configuration(cookies.cookie_manager.getJWTCookieValue(), "import-hashing")

def profile():
    sidebar()
    # check if current jwt is still valid
    if (check_access_allowed()):
        st.title("Profile")

        jwt = cookies.cookie_manager.getJWTCookieValue()

        profile_info = get_profile_info(jwt)
        if 'firstName' in profile_info and 'lastName' in profile_info:
            st.header(f"{profile_info['firstName']} {profile_info['lastName']}")
            st.write("Email: " + profile_info["email"])
            st.write("id: " + profile_info["id"])
            st.write("Role: " + profile_info["role"])
        else:
            st.header(profile_info['email'].split('@')[0])
            st.write("id: " + profile_info["id"])
            st.write("Role: " + profile_info["role"])
        st.markdown("---")

        configuration = get_user_configuration(jwt)
        st.header("Configuration")
        st.write("Last updated at: " + configuration["updatedAt"])
        yara_checkbox = st.checkbox("Enable YARA Rules Analysis", value = configuration["enableYaraAnalysis"], key = "yara_check", on_change=toggle_yara)
        
        fuzzyhashing_checkbox = st.checkbox("Enable Fuzzy Hashing Analysis", value = configuration["enableFuzzyHashingAnalysis"], key = "fuzzy_check", on_change=toggle_fuzzy_hashing)

        import_hashing_checkbox = st.checkbox("Enable Import Hashing Analysis", value = configuration["enableImportHashingAnalysis"], key = "import_check", on_change=toggle_import_hashing)
    
    return

profile()