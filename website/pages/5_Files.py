import os
import time
import requests
import streamlit as st
from check_access import check_access_allowed
import cookies
from sidebar import sidebar
from st_copy_to_clipboard import st_copy_to_clipboard

def get_new_agent_enrollment_token(jwt, file_id):
    enrollment_token = ""

    api_endpoint = os.getenv("API_ENDPOINT") + '/agent/start-enrollment'
    payload = {'fileId': file_id}

    try:
        response = requests.get(api_endpoint, headers = {"Authorization": f"Bearer {jwt}"}, json = payload)
        resp = response.json()

        if response.status_code == 200:
            enrollment_token = resp["token"]
        
        else:
            errors = resp["message"]

            if type(errors) == list:
                for er in errors:
                    st.error(er)
            else:
                st.error(errors)
            st.error("Request failed. Please try again.")

        return enrollment_token

    except Exception as e:
        print("Error occurred during API call:", e)
        st.error("Error ocurred. Please try again.")

def list_files(jwt):
    files_list = []

    api_endpoint = os.getenv("API_ENDPOINT") + '/files/list-files'

    try:
        response = requests.get(api_endpoint, headers={"Authorization": f"Bearer {jwt}"})
        
        if response.status_code == 200:
            files_list = response.json()
        else:
            resp = response.json()
            errors = resp.get("message", "An error occurred while fetching the file list.")
            
            if isinstance(errors, list):
                for er in errors:
                    st.error(er)
            else:
                st.error(errors)

    except Exception as e:
        print("Error occurred during API call:", e)
        st.error("Error occurred while fetching the file list. Please try again.")

    return files_list


def upload_file(jwt, file):
    api_endpoint = os.getenv("API_ENDPOINT") + '/files/upload'
    uploaded_file_data = {}
    
    try:
        files = {'file': file}
        response = requests.post(api_endpoint, headers={"Authorization": f"Bearer {jwt}"}, files=files)
        
        if response.status_code == 201:
            st.success("File uploaded successfully!")
            uploaded_file_data = response.json()

        else:
            resp = response.json()
            errors = resp.get("message", "An error occurred while uploading the file.")
            
            if isinstance(errors, list):
                for er in errors:
                    st.error(er)
            else:
                st.error(errors)
        
        return uploaded_file_data

    except Exception as e:
        print("Error occurred during API call:", e)
        st.error("Error occurred while uploading the file. Please try again.")

def run_yara_analysis(jwt, file_id):
    api_endpoint = os.getenv("API_ENDPOINT") + '/files/run-yara-analysis'
    
    analysis_data = {}
    payload = {'fileId': file_id}
    
    try:
        response = requests.post(api_endpoint, headers={"Authorization": f"Bearer {jwt}"}, json=payload)
        
        if response.status_code == 200:
            st.success("YARA analysis ran successfully!")
            analysis_data = response.json()

        else:
            resp = response.json()
            errors = resp.get("message", "An error occurred while initiating YARA analysis.")
            
            if isinstance(errors, list):
                for er in errors:
                    st.error(er)
            else:
                st.error(errors)

    except Exception as e:
        print("Error occurred during API call:", e)
        st.error("Error occurred while initiating YARA analysis. Please try again.")

    return analysis_data

def run_fuzzy_hashing_analysis(jwt, file_id):
    api_endpoint = os.getenv("API_ENDPOINT") + '/files/run-fuzzy-hashing-analysis'
    
    analysis_data = {}
    payload = {'fileId': file_id}
    
    try:
        response = requests.post(api_endpoint, headers={"Authorization": f"Bearer {jwt}"}, json=payload)
        
        if response.status_code == 200:
            st.success("Fuzzy hashing analysis ran successfully!")
            analysis_data = response.json()

        else:
            resp = response.json()
            errors = resp.get("message", "An error occurred while initiating Fuzzy Hashing analysis.")
            
            if isinstance(errors, list):
                for er in errors:
                    st.error(er)
            else:
                st.error(errors)

    except Exception as e:
        print("Error occurred during API call:", e)
        st.error("Error occurred while initiating Fuzzy Hashing analysis. Please try again.")

    return analysis_data

def run_enabled_analyses(jwt, file_id):
    api_endpoint = os.getenv("API_ENDPOINT") + '/files/run-analysis-with-enabled-configs'
    
    analysis_data = {}
    payload = {'fileId': file_id}
    
    try:
        response = requests.post(api_endpoint, headers={"Authorization": f"Bearer {jwt}"}, json=payload)
        
        if response.status_code == 200:
            st.success("Enabled analysis ran successfully!")
            analysis_data = response.json()

        else:
            resp = response.json()
            errors = resp.get("message", "An error occurred while initiating enabled analyses.")
            
            if isinstance(errors, list):
                for er in errors:
                    st.error(er)
                    if er == "No analyses configured. Please select at least one analysis to be used.":
                        time.sleep(3)
                        st.switch_page("pages/3_Profile.py")
            else:
                st.error(errors)
                if errors == "No analyses configured. Please select at least one analysis to be used.":
                    time.sleep(3)
                    st.switch_page("pages/3_Profile.py")


    except Exception as e:
        print("Error occurred during API call:", e)
        st.error("Error occurred while initiating enabled analysis. Please try again.")

    return analysis_data

def delete_file(jwt, file_id):
    api_endpoint = os.getenv("API_ENDPOINT") + '/files/delete-file'
    
    deleted_data = {}
    payload = {'fileId': file_id}
    
    try:
        response = requests.delete(api_endpoint, headers={"Authorization": f"Bearer {jwt}"}, json=payload)
        
        if response.status_code == 200:
            st.success("File and it's analyses have been deleted successfully!")
            deleted_data = response.json()

        else:
            resp = response.json()
            errors = resp.get("message", "An error occurred while initiating Fuzzy Hashing analysis.")
            
            if isinstance(errors, list):
                for er in errors:
                    st.error(er)
            else:
                st.error(errors)

    except Exception as e:
        print("Error occurred during API call:", e)
        st.error("Error occurred while initiating Fuzzy Hashing analysis. Please try again.")

    return deleted_data

def files():
    sidebar()
    # Check if current jwt is still valid
    if check_access_allowed():
        jwt = cookies.cookie_manager.getJWTCookieValue()  
        st.title("Files")

        if "file_uploader_key" not in st.session_state:
            st.session_state["file_uploader_key"] = 0
        
        if "delete-btn" not in st.session_state:
            st.session_state["delete-btn"] = False

        file_upload = st.file_uploader("Upload a file", key=st.session_state["file_uploader_key"])
        
        if file_upload is not None:
            data = upload_file(jwt, file_upload)
            if (data):
                st.session_state["file_uploader_key"] += 1
                time.sleep(1)
                st.rerun()
        
        st.markdown("---")
        st.header("My Files")
        user_files = list_files(jwt)
        if user_files:
            for file in user_files:
                st.subheader(file["originalName"])
                st.write("Uploaded at: " + file["createdAt"])
                if file["isAnalyzed"] == True:
                    st.write("Analyzed: :heavy_check_mark:")
                    st.write("Last Analyzed at: " + file["lastAnalyzedAt"])
                    #st.write("Malware Score: " + file["malwareScore"])
                    if file["isMalware"] == True:
                        st.write("Possible Malware detected :biohazard_sign:")
                    else:
                        st.write("Probably not malware :heavy_check_mark:")
                else:
                    st.write("Analyzed: :x:")
                
                if st.button("Generate new Enrollment Token"):
                    token = get_new_agent_enrollment_token(jwt, file["id"])
                    st.text("Token: " + token)
                    if st.button("Copy Token"):
                        st_copy_to_clipboard(token)
                
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("Run enabled analyses on File", key = file["id"]):
                        analyses_data = run_enabled_analyses(jwt, file["id"])
                        print(analyses_data)
                        time.sleep(3)
                        st.rerun()
                with col2:
                    if st.button("Delete File and it's analyses :wastebasket:", key = 'd' + str(file["id"])):
                        st.session_state["delete-btn"] = not st.session_state["delete-btn"]
                    
                    if st.session_state["delete-btn"]:
                        st.warning("This action can't be undone! Are you sure?")
                        if st.button("Confirm", key = 'cd' + str(file["id"])):
                            deleted_data = delete_file(jwt, file["id"])
                            print(deleted_data)
                            time.sleep(1)
                            st.session_state["delete-btn"] = not st.session_state["delete-btn"]
                            st.rerun()
                st.markdown("---")
                


        else:
            st.write("No files have been uploaded!")
        


files()
