import streamlit as st
import requests
import os
import extra_streamlit_components as stx
from streamlit_cookies_manager import EncryptedCookieManager

def register_user(first_name, last_name, email, password):
    jwt = ""
    api_endpoint = os.getenv("API_ENDPOINT") + '/auth/signup'

    payload = {
        "email": email,
        "password": password
    }
    if first_name:
        payload["firstName"] = first_name
    
    if last_name:
        payload["lastName"] = last_name

    try:
        response = requests.post(api_endpoint, json=payload)
        resp = response.json()

        if response.status_code == 201:
            st.success("Registration Successful!")
            print(resp)
            jwt = resp["access_token"]
        
        else:
            errors = resp["message"]

            if type(errors) == list:
                for er in errors:
                    st.error(er)
            else:
                st.error(errors)
            st.error("Registration failed. Please try again.")

        return jwt

    except Exception as e:
        print("Error occurred during API call:", e)
        st.error("Error ocurred. Please try again.")

# Register Page
def register():
    # This should be on top of your script
    cookies = EncryptedCookieManager(
        # This prefix will get added to all your cookie names.
        # This way you can run your app on Streamlit Cloud without cookie name clashes with other apps.
        prefix="ktosiek/streamlit-cookies-manager/",
        # You should really setup a long COOKIES_PASSWORD secret if you're running on Streamlit Cloud.
        password=os.getenv("COOKIES_PASSWORD"),
    )
    if not cookies.ready():
        # Wait for the component to load and send us current cookies.
        st.stop()

    st.title("Register")
    first_name = st.text_input("First Name")
    last_name = st.text_input("Last Name")
    email = st.text_input("Email*")
    password = st.text_input("Password*", type="password")
    confirm_password = st.text_input("Confirm Password*", type="password")

    if st.button("Register"):
        
        if not email:
            st.error("Email can't be empty")
            return
        
        if not password or not confirm_password:
            st.error("Password can't be empty")
            return

        if password != confirm_password:
            st.error("Passwords do not match")
            return

        jwt = register_user(first_name, last_name, email, password)

        if jwt:
            print(jwt)
            with st.sidebar:
                st.write(f"Welcome, {email.split('@')[0]}")
            
            cookies["jwt_token"] = jwt
            cookies.save()
            print(cookies)

