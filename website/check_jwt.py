import os
import jwt
import time
import streamlit as st
import Home

def is_token_expired(jwt_token):
    try:
        # Decode the JWT token without verifying the signature
        decoded_token = jwt.decode(jwt_token, algorithms=["HS256"], key=os.getenv("JWT_SECRET"))
        
        # Get the expiration time (exp) claim from the decoded token
        expiration_time = decoded_token.get("exp")

        # If expiration time is not present, assume the token is expired
        if not expiration_time:
            return True
        
        # Compare the expiration time with the current time
        current_time = time.time()
        if current_time > expiration_time:
            return True
        else:
            return False
    except jwt.ExpiredSignatureError as er:
        print(er)
        # If the token has an expired signature, it is expired
        return True
    except jwt.DecodeError as e:
        # If there is an error decoding the token, assume it is expired
        print(e)
        return True
    except Exception as e:
        # Handle other exceptions
        print("Error occurred:", e)
        return True

def validate_token(jwt_token):
    expired = is_token_expired(jwt_token)

    if expired:
        print("EXPIRED")
        Home.cookie_manager.deleteJWTCookie()
        st.session_state.auth_status = "Not Authenticated"
        st.switch_page("pages/2_Login.py")