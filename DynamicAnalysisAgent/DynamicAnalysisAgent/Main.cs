using Newtonsoft.Json;
using SharpPcap;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace DynamicAnalysisAgent
{
    public partial class Main : UserControl

    {
        private System.Windows.Forms.Timer heartbeatTimer;
        private string HeartbeatUrl = "http://localhost:3333/agent/heartbeat";
        private string userEmail = string.Empty;
        private string fileId = string.Empty;
        private SocketClient webSocketClient;
        private System.Threading.Timer timer;
        private NetworkSnifferModule sniffer;
        private List<string> detectedURLs = new List<string>();
        private List<string> detectedIPs = new List<string>();
        private HashSet<string> sentURLs = new HashSet<string>();
        private HashSet<string> sentIPs = new HashSet<string>();
        private Boolean snifferStarted = false;

        public Main()
        {
            InitializeComponent();
        }

        public string getUserEmail()
        {
            return this.userEmail;
        }

        public void setUserEmail(string userEmail)
        {
            this.userEmail = userEmail;
            lblEmail.Text = userEmail;
        }
        public string getFileId()
        {
            return this.fileId;
        }

        public void setFileId(string fileId)
        {
            this.fileId = fileId;
            lblFileId.Text = fileId;
        }

        private async Task<bool> CommunicationExistsAsync()
        {
            using (var client = new HttpClient())
            {
                try
                {
                    HttpResponseMessage response = await client.GetAsync(HeartbeatUrl);

                    if (response.IsSuccessStatusCode)
                    {
                        string responseBody = await response.Content.ReadAsStringAsync();
                        return responseBody.Contains("OK");
                    }
                    else
                    {
                        return false;
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("Error occurred during communication check: " + ex.Message);
                    return false;
                }
            }
        }

        private void HeartbeatTimer_Tick(object sender, EventArgs e)
        {
            Task task = RunHeartbeatAsync();
        }

        private async Task RunHeartbeatAsync()
        {
            bool communicationExists = await CommunicationExistsAsync();
            if (communicationExists)
            {
                // System.Diagnostics.Debug.WriteLine("Communication is alive.");
                lblCommunicationStatus.Text = "Communication is active!";
                lblCommunicationStatus.ForeColor = Color.Green;
            }
            else
            {
                // System.Diagnostics.Debug.WriteLine("Communication is lost.");
                lblCommunicationStatus.Text = "Communication is not active!";
                lblCommunicationStatus.ForeColor = Color.Red;
            }
        }

        public async void StartHeartbeat()
        {
            // Run first and then start timer
            await RunHeartbeatAsync();

            // Initialize the Timer
            heartbeatTimer = new System.Windows.Forms.Timer();
            heartbeatTimer.Interval = 10000; // 10 seconds
            heartbeatTimer.Tick += HeartbeatTimer_Tick;
            heartbeatTimer.Start();
        }

        public async void InitializeWebSocket()
        {
            webSocketClient = new SocketClient();
            webSocketClient.fileId = this.fileId;
            webSocketClient.userEmail = this.userEmail;
            webSocketClient.MessageReceived += WebSocketClient_MessageReceived;
            await webSocketClient.Start();
        }

        public void InitializeSniffer()
        {
            string selectedAdapter = comboBoxNetworkAdapters.SelectedItem as string;

            string deviceName = selectedAdapter.Split('(')[1].TrimEnd(')');

            var devices = CaptureDeviceList.Instance;
            int deviceIndex = devices.ToList().FindIndex(device => device.Description == deviceName);

            sniffer = new NetworkSnifferModule(deviceIndex);
            sniffer.Start();

            timer = new System.Threading.Timer(CheckURLsAndIpsAndSendRequest, null, TimeSpan.Zero, TimeSpan.FromSeconds(10));

            snifferStarted = true;
            btnNetworkSniffing.Text = "Stop Network Sniffing";
        }

        public void DisposeSniffer()
        {
            if (snifferStarted)
            {
                sniffer.Stop();
                CheckURLsAndIpsAndSendRequest();
                snifferStarted = false;
                timer.Dispose();
                btnNetworkSniffing.Text = "Start Network Sniffing";

            }
        }

        private async void WebSocketClient_MessageReceived(object sender, string message)
        {
            // Handle received message
            // This method runs on a background thread, so make sure to update UI controls on the UI thread if needed
            // Example:
            // Invoke(new Action(() => textBoxOutput.Text = message));
        }

        private async void CheckURLsAndIpsAndSendRequest(object state)
        {
            List<string> urls = sniffer.GetDetectedURLs();
            List<string> ips = sniffer.GetDetectedIPs();

            List<string> unsentURLs = GetUnsentData(urls, sentURLs);
            if (unsentURLs.Count > 0)
            {
                await webSocketClient.SendLogData("NetworkSniffing", unsentURLs);
            }

            List<string> unsentIPs = GetUnsentData(ips, sentIPs);
            if (unsentIPs.Count > 0)
            {
                await webSocketClient.SendLogData("NetworkSniffing", unsentIPs);
            }
        }

        private async void CheckURLsAndIpsAndSendRequest()
        {
            List<string> urls = sniffer.GetDetectedURLs();
            List<string> ips = sniffer.GetDetectedIPs();

            List<string> unsentURLs = GetUnsentData(urls, sentURLs);
            if (unsentURLs.Count > 0)
            {
                await webSocketClient.SendLogData("NetworkSniffing", unsentURLs);
            }

            List<string> unsentIPs = GetUnsentData(ips, sentIPs);
            if (unsentIPs.Count > 0)
            {
                await webSocketClient.SendLogData("NetworkSniffing", unsentIPs);
            }
        }

        private List<string> GetUnsentData(List<string> data, HashSet<string> sentData)
        {
            List<string> unsentData = new List<string>();
            foreach (var item in data)
            {
                if (!sentData.Contains(item))
                {
                    unsentData.Add(item);
                    sentData.Add(item);
                }
            }
            return unsentData;
        }
        private void btnNetworkSniffing_Click(object sender, EventArgs e)
        {
            if (!snifferStarted)
            {
                InitializeSniffer();
            }
            else
            {
                DisposeSniffer();
            }
        }
    }
}
