using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace DynamicAnalysisAgent
{
    public partial class Main : UserControl

    {
        private System.Windows.Forms.Timer heartbeatTimer;
        private string HeartbeatUrl = "http://localhost:3333/agent/heartbeat";
        private string userEmail = string.Empty;
        private string fileId = string.Empty;
        private WebSocketClient webSocketClient;

        public Main()
        {
            InitializeComponent();
            InitializeWebSocket();
        }

        public string getUserEmail()
        {
            return this.userEmail;
        }

        public void setUserEmail(string userEmail)
        {
            this.userEmail = userEmail;
            lblEmail.Text = userEmail;
        }
        public string getFileId()
        {
            return this.fileId;
        }

        public void setFileId(string fileId)
        {
            this.fileId = fileId;
            lblFileId.Text = fileId;
        }

        private async Task<bool> CommunicationExistsAsync()
        {
            using (var client = new HttpClient())
            {
                try
                {
                    HttpResponseMessage response = await client.GetAsync(HeartbeatUrl);

                    if (response.IsSuccessStatusCode)
                    {
                        string responseBody = await response.Content.ReadAsStringAsync();
                        return responseBody.Contains("OK");
                    }
                    else
                    {
                        return false;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error occurred during communication check: " + ex.Message);
                    return false;
                }
            }
        }

        private void HeartbeatTimer_Tick(object sender, EventArgs e)
        {
            Task task = RunHeartbeatAsync();
        }

        private async Task RunHeartbeatAsync()
        {
            bool communicationExists = await CommunicationExistsAsync();
            if (communicationExists)
            {
                Console.WriteLine("Communication is alive.");
                lblCommunicationStatus.Text = "Communication is active!";
                lblCommunicationStatus.ForeColor = System.Drawing.Color.Green;
            }
            else
            {
                Console.WriteLine("Communication is lost.");
                lblCommunicationStatus.Text = "Communication is not active!";
                lblCommunicationStatus.ForeColor = System.Drawing.Color.Red;
            }
        }

        public async void StartHeartbeat()
        {
            // Run first and then start timer
            await RunHeartbeatAsync();

            // Initialize the Timer
            heartbeatTimer = new System.Windows.Forms.Timer();
            heartbeatTimer.Interval = 10000; // 10 seconds
            heartbeatTimer.Tick += HeartbeatTimer_Tick;
            heartbeatTimer.Start();
        }

        private async void InitializeWebSocket()
        {
            webSocketClient = new WebSocketClient();
            webSocketClient.MessageReceived += WebSocketClient_MessageReceived;
            await webSocketClient.Start();
        }
        private async void WebSocketClient_MessageReceived(object sender, string message)
        {
            // Handle received message
            // This method runs on a background thread, so make sure to update UI controls on the UI thread if needed
            // Example:
            // Invoke(new Action(() => textBoxOutput.Text = message));
        }

        private async void button1_Click(object sender, EventArgs e)
        {
            // Create a message data object
            var messageData = new MessageData
            {
                fileId = this.fileId,
                type = "NetworkSniffing", // or "RansomwareDetection"
                logs = new List<string> { "log1", "log2", "log3" }
            };

            // Serialize the message data object to JSON
            string jsonMessage = JsonConvert.SerializeObject(messageData);

            // Send the JSON message to the server
            await webSocketClient.SendAsync(jsonMessage);

            // Dispose the WebSocket client when done
            webSocketClient.Dispose();
        }
    }
}
