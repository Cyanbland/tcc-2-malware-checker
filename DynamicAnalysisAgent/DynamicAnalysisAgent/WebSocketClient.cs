using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.WebSockets;
using System.Text;
using System.Threading.Tasks;

namespace DynamicAnalysisAgent
{
    internal class WebSocketClient : IDisposable
    {
        private ClientWebSocket clientWebSocket;
        private CancellationTokenSource cancellationTokenSource;
        private bool isDisposed = false;

        public event EventHandler<string> MessageReceived;
        private Uri serverUri = new Uri("ws://localhost:3333");

        public async Task Start()
        {
            clientWebSocket = new ClientWebSocket();
            cancellationTokenSource = new CancellationTokenSource();

            try
            {
                // Connect to the WebSocket server (adjust the URL accordingly)
                
                await clientWebSocket.ConnectAsync(serverUri, cancellationTokenSource.Token);

                // Start receiving messages in a background task
                _ = Task.Run(async () =>
                {
                    byte[] buffer = new byte[1024];
                    while (clientWebSocket.State == WebSocketState.Open)
                    {
                        var result = await clientWebSocket.ReceiveAsync(new ArraySegment<byte>(buffer), cancellationTokenSource.Token);
                        if (result.MessageType == WebSocketMessageType.Text)
                        {
                            string message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                            OnMessageReceived(message);
                        }
                    }
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"WebSocket connection error: {ex.Message}");
            }
        }

        public async Task SendAsync(string message)
        {
            if (clientWebSocket.State == WebSocketState.Open)
            {
                byte[] buffer = Encoding.UTF8.GetBytes(message);
                await clientWebSocket.SendAsync(new ArraySegment<byte>(buffer), WebSocketMessageType.Text, true, cancellationTokenSource.Token);
            }
            else
            {
                Console.WriteLine("WebSocket connection is not open.");
            }
        }

        protected virtual void OnMessageReceived(string message)
        {
            MessageReceived?.Invoke(this, message);
        }

        public void Dispose()
        {
            if (!isDisposed)
            {
                cancellationTokenSource?.Cancel();
                cancellationTokenSource?.Dispose();
                clientWebSocket?.Dispose();
                isDisposed = true;
            }
        }
    }
}
