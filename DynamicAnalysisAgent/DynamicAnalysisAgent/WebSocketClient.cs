using System;
using System.Threading.Tasks;
using H.Socket.IO;
using Microsoft.VisualBasic.Logging;
using System.Net.WebSockets;
using System.Text;
using System.Diagnostics;
using System.Runtime.CompilerServices;


namespace DynamicAnalysisAgent
{
    internal class SocketClient
    {
        private readonly ClientWebSocket client;
        private bool isConnected = false;
        private bool isDisposed = false;
        public string userEmail {get; set;}
        public string fileId { get; set;}
        public event EventHandler<string> MessageReceived;

        public SocketClient()
        {
            this.client = new ClientWebSocket();
        }

        public async Task Start()
        {
            Uri serverUri = new Uri("ws://localhost:3335"); // localhost

            //using (this.client)
            //{

            await client.ConnectAsync(serverUri, CancellationToken.None);
            Debug.WriteLine("Connected!");

            await this.SendAsync("Start-Communication#" + this.userEmail + "#" + this.fileId);
            Debug.WriteLine("Initial Message sent!");

            // To receive data
            //byte[] buffer = new byte[1024];
            //var result = await client.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
            //string receivedString = Encoding.UTF8.GetString(buffer, 0, result.Count);
            //Debug.WriteLine("Received: " + receivedString);
                
            //}

        }

        public async Task SendLogData(string logType, List<string> logs, bool isURL = false)
        {
            var logsString = "Data#" + this.userEmail + "#" + this.fileId + "#" + logType + "&"; // + logs

            if (logType == "NetworkSniffing")
            {
                if (isURL)
                {
                    logsString += "URL&";
                }
                else
                {
                    logsString += "IP&";
                }
            }

            logsString += string.Join("|", logs);
            await this.SendAsync(logsString);
        }

        public async Task SendAsync(string message)
        {
            //using (this.client)
            //{
            Debug.WriteLine(this.client.State);
            if (this.client.State == WebSocketState.Open) // Handshake closed
            {
                byte[] sendBuffer = Encoding.UTF8.GetBytes(message);
                await client.SendAsync(new ArraySegment<byte>(sendBuffer), WebSocketMessageType.Text, true, CancellationToken.None);
            }
            else
            {
                Debug.WriteLine("Websocket connection is not open.");
            }
            //}
            Debug.WriteLine(this.client.State);
        }
    }
}
