using Newtonsoft.Json;
using System.Diagnostics;

namespace DynamicAnalysisAgent
{
    public partial class Enrollment : UserControl
    {
        private Form form;
        private string EnrollUrl = "http://localhost:3333/agent/enroll"; // localhost


        public Enrollment()
        {
            InitializeComponent();
        }

        private async Task<bool> EnrollAgentAsync()
        {
            using (var client = new HttpClient())
            {
                try
                {
                    string token = txtBoxToken.Text;

                    var formData = new List<KeyValuePair<string, string>>();
                    formData.Add(new KeyValuePair<string, string>("token", token));

                    var encodedFormData = new FormUrlEncodedContent(formData);

                    HttpResponseMessage response = await client.PostAsync(EnrollUrl, encodedFormData);

                    if (response.IsSuccessStatusCode)
                    {
                        // Check if the response body contains "{ success: true }"
                        string responseBody = await response.Content.ReadAsStringAsync();
                        var responseObject = JsonConvert.DeserializeObject<dynamic>(responseBody);
                        return responseObject.success;
                    }
                    else
                    {
                        string responseBody = await response.Content.ReadAsStringAsync();
                        var responseObject = JsonConvert.DeserializeObject<dynamic>(responseBody);
                        var messages = responseObject.message;
                        string messageToPrint = "";
                        if (messages != null && messages.HasValues)
                        {
                            messageToPrint = String.Join(" | ", messages);
                        }
                        else
                        {
                            messageToPrint = messages;
                        }

                        MessageBox.Show(messageToPrint, "Response Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine("Error occurred during agent enrollment: " + ex.Message);
                    return false;
                }
            }
        }

        private async void btnEnroll_Click(object sender, EventArgs e)
        {
            // Send request to validate enrollment Token
            bool validatedToken = await this.EnrollAgentAsync();
            if (validatedToken)
            {
                string[] tokenData = txtBoxToken.Text.Split("#");
                string email = tokenData[0];
                string fileId = tokenData[1];

                var mainUserControl = form.getMainUserControl();
                mainUserControl.setUserEmail(email);
                mainUserControl.setFileId(fileId);
                mainUserControl.InitializeWebSocket();
                form.toggleMainDisplay();
            }
        }

        public void SetMainForm(Form form)
        {
            this.form = form;
        }

        private void txtBoxToken_TextChanged(object sender, EventArgs e)
        {
            string token = txtBoxToken.Text;
            btnEnroll.Enabled = !string.IsNullOrEmpty(token);
        }

        private void btnRansomwareDetection_Click(object sender, EventArgs e)
        {
            string driverPath = Path.Join(Environment.CurrentDirectory, "FltMgrHookKD.sys");
            var driverService = new DriverService("FltMgrHookKD", driverPath);

            driverService.Start();
        }
    }
}
