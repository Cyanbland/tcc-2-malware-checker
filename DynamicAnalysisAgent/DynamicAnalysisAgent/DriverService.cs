using System.Runtime.InteropServices;

namespace DynamicAnalysisAgent
{
    public class DriverService
    {
        [DllImport("advapi32.dll", SetLastError = true)]
        public static extern IntPtr OpenSCManager(string machineName, string databaseName, uint dwAccess);

        [DllImport("advapi32.dll", SetLastError = true)]
        public static extern IntPtr CreateService(IntPtr hSCManager, string lpServiceName, string lpDisplayName, uint dwDesiredAccess, uint dwServiceType, uint dwStartType, uint dwErrorControl, string lpBinaryPathName, string lpLoadOrderGroup, string lpdwTagId, string lpDependencies, string lpServiceStartName, string lpPassword);

        [DllImport("advapi32.dll", SetLastError = true)]
        public static extern bool StartService(IntPtr hService, uint dwNumServiceArgs, string lpServiceArgVectors);

        [DllImport("advapi32.dll", SetLastError = true)]
        public static extern IntPtr OpenService(IntPtr hService, string lpServiceName, uint dwDesiredAccess);
        public string ServiceName { get; set; }
        public string DriverPath { get; set; }

        const uint ERROR_SERVICE_ALREADY_EXISTS = 0x431;
        public DriverService(string serviceName, string driverPath)
        {
            ServiceName = serviceName;
            DriverPath = driverPath;
        }

        public void Start()
        {
            const uint SC_MANAGER_CREATE_SERVICE = 0x0002;
            const uint SERVICE_WIN32_OWN_PROCESS = 0x00000010;
            const uint SERVICE_DEMAND_START = 0x00000003;
            const uint SERVICE_ERROR_NORMAL = 0x00000001;
            const uint GENERIC_READ = 0x80000000;



            string DRIVER_NAME = ServiceName;

            IntPtr scm = OpenSCManager(null, null, 0xF003F);

            if (scm == IntPtr.Zero)
            {
                throw new Exception("OpenSCManager Failed");
            }

            IntPtr service = CreateService(scm, DRIVER_NAME, DRIVER_NAME, GENERIC_READ, 0x00000001, SERVICE_DEMAND_START, SERVICE_ERROR_NORMAL, DriverPath, null, null, null, null, null);

            if (service == IntPtr.Zero)
            {
                int errorCode = Marshal.GetLastWin32Error();

                if (errorCode == ERROR_SERVICE_ALREADY_EXISTS)
                {
                    service = OpenService(scm, ServiceName, 0xF003F);
                    if (service == IntPtr.Zero)
                    {
                        throw new Exception("OpenService Failed");
                    }
                }
                else
                {
                    throw new Exception("CreateService Failed");
                }
            }

            if (!StartService(service, 0, null))
            {
                int errorCode = Marshal.GetLastWin32Error();

                throw new Exception("StartService Failed " + errorCode.ToString());
            }
        }

        const uint SERVICE_CONTROL_STOP = 0x00000001;
        const uint SERVICE_STOPPED = 0x00000001;

        [StructLayout(LayoutKind.Sequential)]
        public struct SERVICE_STATUS
        {
            public uint dwServiceType;
            public uint dwCurrentState;
            public uint dwControlsAccepted;
            public uint dwWin32ExitCode;
            public uint dwServiceSpecificExitCode;
            public uint dwCheckPoint;
            public uint dwWaitHint;
        };

        [DllImport("advapi32.dll", SetLastError = true)]
        public static extern bool ControlService(IntPtr hService, uint dwControl, out SERVICE_STATUS lpServiceStatus);

        [DllImport("advapi32.dll", SetLastError = true)]
        public static extern bool CloseServiceHandle(IntPtr hSCObject);
        public void StopDriver()
        {
            IntPtr scm = OpenSCManager(null, null, 0xF003F);

            if (scm == IntPtr.Zero)
            {
                throw new Exception("OpenSCManager Failed");
            }

            IntPtr service = CreateService(scm, ServiceName, ServiceName, 0, 0, 0, 0, null, null, null, null, null, null);

            if (service == IntPtr.Zero)
            {
                int errorCode = Marshal.GetLastWin32Error();

                if (errorCode == ERROR_SERVICE_ALREADY_EXISTS)
                {
                    service = OpenService(scm, ServiceName, 0xF003F);
                    if (service == IntPtr.Zero)
                    {
                        throw new Exception("OpenService Failed");
                    }
                }
                else
                {
                    throw new Exception("CreateService Failed");
                }
            }
            SERVICE_STATUS status = new SERVICE_STATUS();

            if (!ControlService(service, SERVICE_CONTROL_STOP, out status))
            {
                throw new Exception("ControlService Failed");
            }

            while (status.dwCurrentState != SERVICE_STOPPED)
            {
                System.Threading.Thread.Sleep(1000);
                if (!ControlService(service, SERVICE_CONTROL_STOP, out status))
                {
                    throw new Exception("ControlService Failed");
                }
            }

            if (!CloseServiceHandle(service))
            {
                throw new Exception("CloseServiceHandle Failed");
            }

            if (!CloseServiceHandle(scm))
            {
                throw new Exception("CloseServiceHandle Failed");
            }
        }
    }
}