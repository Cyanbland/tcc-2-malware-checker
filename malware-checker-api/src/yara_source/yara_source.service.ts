import { BadRequestException, ConflictException, Injectable, NotFoundException, OnModuleInit, PreconditionFailedException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { existsSync, readdirSync, statSync } from 'fs'
import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';
import {basename, resolve} from 'path';
import { YaraRuleService } from '../yara_rule/yara_rule.service';

@Injectable()
export class YaraSourceService implements OnModuleInit {
    async onModuleInit() {
        const YaraGithubSourceExists = await this.prisma.yaraRuleSource.findUnique({
            where: {
                name: "YARA Main Github"
            }
        })
        
        if (YaraGithubSourceExists === null) {
            console.log("Generating YaraGithubSource")
            const yaraGithubSource = await this.createYaraGithubSource();
            const yaraRulesFromYaraGithubSource = await this.addYaraGithubRulesToSource(yaraGithubSource.id)
            console.log("Finished generating YaraGithubSource")
        }
    }
    
    constructor(private prisma: PrismaService, private yaraService: YaraRuleService) {}
    
    yaraGithubDir = resolve(__dirname, '../../yara_sources/rules-master')
    
    async createYaraGithubSource() {
        if (!existsSync(this.yaraGithubDir)) {
            throw new NotFoundException("Yara Github not found at ../../yara_sources/rules-master")
        }
        
        try {
            let data = {
                name: "YARA Main Github",
                referenceUrl: "https://github.com/Yara-Rules/rules"
            }
            
            return await this.prisma.yaraRuleSource.create({ data })
        }
        catch(error) {
            if (error instanceof PrismaClientKnownRequestError) {
                throw new BadRequestException(error.message)
            }
        }
        
    }
    
    async addYaraGithubRulesToSource(sourceId: number) {
        // create a Yara Rule for each .yar file 
        const yaraExt = "yar"
        
        try {
            const yaraRules = this.getAllFilesWithExtension(this.yaraGithubDir, yaraExt)
            
            yaraRules.forEach(file => {
                let fileName = basename(file)
                this.yaraService.createYaraRule(fileName, file, sourceId)
            })
            
            return await this.prisma.yaraRule.findMany({
                where: {
                    sourceId
                }
            })
        }
        
        catch(error) {
            throw new NotFoundException(error.message)
        }
        
    }
    
    getAllFilesWithExtension(directoryPath, extension, fileList = []) {
        const files = readdirSync(directoryPath);
        
        files.forEach(file => {
            const filePath = resolve(directoryPath, file);
            const fileStat = statSync(filePath);
            
            if (fileStat.isDirectory()) {
                this.getAllFilesWithExtension(filePath, extension, fileList);
            } else if (filePath.endsWith(`.${extension}`)) {
                fileList.push(filePath);
            }
        });
        
        return fileList;
    }
    
    async subscribeUserToYaraSource(email: string, sourceId: number) {
        try {
            const user = await this.prisma.user.findUnique({
                where: {
                    email
                }
            })
            
            const source = await this.prisma.yaraRuleSource.findUnique({
                where: {
                    id: sourceId
                }
            })
            
            if (!source) {
                throw new NotFoundException("Source not found!")
            }
            
            const currentUserYaraSource = await this.prisma.yaraRuleSourcesOnUsers.findFirst({
                where: {
                    sourceId,
                    userId: user.id
                }
            })
            
            if (currentUserYaraSource) {
                throw new ConflictException("User is already subscribed to this YARA Source")
            }
            
            return this.prisma.yaraRuleSourcesOnUsers.create({
                data: {
                    sourceId,
                    userId: user.id
                }
            })
        }
        
        catch(error) {
            throw error
        }
    }
    
    async unsubscribeUserToYaraSource(email: string, sourceId: number) {
        try {
            const user = await this.prisma.user.findUnique({
                where: {
                    email
                }
            })
            
            const source = await this.prisma.yaraRuleSource.findUnique({
                where: {
                    id: sourceId
                }
            })
            
            if (!source) {
                throw new NotFoundException("Source not found!")
            }
            
            const currentUserYaraSource = await this.prisma.yaraRuleSourcesOnUsers.findFirst({
                where: {
                    sourceId,
                    userId: user.id
                }
            })
            
            if (!currentUserYaraSource) {
                throw new PreconditionFailedException("User is not subscribed to this YARA Source")
            }
            
            return this.prisma.yaraRuleSourcesOnUsers.delete({
                where: {
                    userId_sourceId: {
                        userId: user.id,
                        sourceId
                    }
                }
            })
        }
        
        catch(error) {
            throw error
        }
    }
    
    async listSubscribedYaraSources(email: string) {
        try {
            const user = await this.prisma.user.findUnique({
                where: {
                    email
                },
                include: {
                    subscribedYaraSources: true
                }
            })
            
            const sources = user.subscribedYaraSources
            
            return sources
        }
        
        catch(error) {
            throw error
        }
    }
    
    async listYaraSources() {
        try {
            const yara_sources = await this.prisma.yaraRuleSource.findMany();

            return yara_sources
        }
        catch(error) {
            if (error instanceof PrismaClientKnownRequestError) {
                throw new BadRequestException(error.message)
            }
        }
    }
    
}
