import { Injectable, OnModuleInit } from '@nestjs/common'
import { Cron } from '@nestjs/schedule'
import simpleGit, { SimpleGit } from 'simple-git'
import * as fs from 'fs'
import * as path from 'path'
import { PrismaService } from '../prisma/prisma.service'

@Injectable()
export class BlocklistService implements OnModuleInit {
	private readonly repoUrl = 'https://github.com/firehol/blocklist-ipsets.git'
	private readonly repoDir = path.join(__dirname, 'blocklist-ipsets')

	constructor(private prisma: PrismaService) {}

	async onModuleInit() {
		//await this.cloneOrUpdateRepo()
		await this.updateBlocklistIps()
	}

	@Cron('0 0 * * *')
	async handleCron() {
		console.log('Called every day at midnight')
		await this.updateBlocklistIps()
	}

	private async cloneOrUpdateRepo() {
		const git = simpleGit()

		if (fs.existsSync(this.repoDir)) {
			console.log('Updating existing IPSET repository')
			await git.cwd(this.repoDir).pull('origin', 'master')
		} else {
			console.log('Cloning IPSET repository')
			await git.clone(this.repoUrl, this.repoDir)
		}
	}

	private async updateBlocklistIps() {
		await this.cloneOrUpdateRepo()

		const files = fs.readdirSync(this.repoDir)
		const ipSetFiles = files.filter(file => file.endsWith('.ipset') || file.endsWith('.netset'))

		let allIps: string[] = []

		for (const file of ipSetFiles) {
			const filePath = path.join(this.repoDir, file)
			const fileContent = fs.readFileSync(filePath, 'utf-8')
			const lines = fileContent.split('\n')

			let ips: string[] = []
			
			lines.forEach(line => {
				const ip = line.trim().split(/\s+/)[0]
				if (ip && !ip.startsWith('#')) {
					ips.push(ip.replace(/\r/g, ''))
			}
			})

			allIps = [...allIps, ...ips]
		}

		await this.prisma.iPBlockList.deleteMany({})
		await this.prisma.iPBlockList.create({
			data: {
				ips: allIps
			},
		})

		console.log('Blocklist updated successfully')
	}
}
