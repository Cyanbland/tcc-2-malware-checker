import { ForbiddenException, Injectable } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { ConfigService } from '@nestjs/config';
import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';
import { SecretDto } from './dto/secret.dto';
import { Role } from '@prisma/client';

@Injectable()
export class UserService {
    constructor(private prisma: PrismaService, private config: ConfigService) {}

    async makeUserAdmin(email:string, dto: SecretDto) {
        const admin_secret = this.config.get("ADM_SECRET")

        if (dto.secret !== admin_secret) throw new ForbiddenException("Credentials are incorrect")
        try {
            const user = await this.prisma.user.update({
                where: {
                    email
                },
                data: {
                    role: Role.ADMIN
                }
            })

            return user;
        }
        catch (error) {
            if (error instanceof PrismaClientKnownRequestError) {
                // "The record searched for in the where condition ({model_name}.{argument_name} = {argument_value}) does not exist"
                if (error.code === 'P2001') {
                    throw new ForbiddenException("Credentials are incorrect")
                }
            }
        }


    }
}
