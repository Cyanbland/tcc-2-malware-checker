import { server as WebSocketServer } from 'websocket'
import * as http from 'http'
import { AgentService } from '../agent.service'

export class AgentsWebSocketServer {
    private wsServer: WebSocketServer
    private agents = []

    private networkIPLogs: string[] = []
    private networkURLLogs: string[] = []
    private ransomwareDetectionLogs: string[] = []
  
    private LOGS_THRESHOLD = 2

    constructor(port: number, private agent: AgentService) {
        const server = http.createServer((request, response) => {
            console.log((new Date()) + ' Received request for ' + request.url)
            response.writeHead(404)
            response.end()
        })
        server.listen(port, () => {
            console.log((new Date()) + ` Server is listening on port ${port}`)
        })

        this.wsServer = new WebSocketServer({
            httpServer: server,
            autoAcceptConnections: false
        })

        this.wsServer.on('request', (request) => {
            const connection = request.accept(null, request.origin)
            connection.on('message', (message) => this.handleMessage(message))
        })
    }

    private handleMessage(message) {
        if (message.type === 'utf8') {
            const receivedMsg = message.utf8Data
            console.log(`Message received => ${receivedMsg}`)

            const email = receivedMsg.split("#")[1]
            const fileId = receivedMsg.split("#")[2]
            const id = `${email}-${fileId}`

            try {
                // check if agent already started communication
                if (this.agents.includes(id)) {
                    // Data#a@gmail.com#dajskdalksd1jdskla#NetworkSniffing&IP&192.168.x.x|192.168.2.3
                    if (String(receivedMsg).startsWith("Data")) {
                        const data = receivedMsg.split("#")[3]

                        const splitData = data.split("&")
                        const logType = splitData[0]                       

                        // Process the message based on its type
                        switch (logType) {
                            case 'NetworkSniffing': {
                                const networkSniffingLogSubtype = splitData[1]
                                const parsedLogs = splitData[2].split("|")
                                
                                if (networkSniffingLogSubtype == "URL") {
                                    console.log('NetworkSniffing URL logs:', parsedLogs)
                                    this.pushLogsToDB(parsedLogs, "NetworkSniffing", fileId, true) // IS URL
                                }
                                else {
                                    console.log('NetworkSniffing IP logs:', parsedLogs)
                                    this.pushLogsToDB(parsedLogs, "NetworkSniffing", fileId, false) // IS IP
                                }
                                return
                            }
                            case 'RansomwareDetection': {
                                const logs = splitData[1]
                                console.log('RansomwareDetection logs:', logs)
                                const parsedLogs = logs.split("|")
                                this.pushLogsToDB(parsedLogs, "RansomwareDetection", fileId)
                                return
                            }
                            default:
                                console.log('Unknown message type:', logType)
                                return
                        }
                    }
                }
                
                if (String(receivedMsg).startsWith("Start-Communication")) {
                    console.log("Started Websocket communication with " + id)
                    this.agents.push(id)
                    return
                }
                if (String(receivedMsg).startsWith("End-Communication")) {
                    this.agents = this.agents.filter(c => c !== id)
                    return
                }
            }
            catch (error) {
                console.error(error)
            }
        }

        console.log(message)
    }

    pushLogsToDB(logs: string[], logType: string, fileId: string, isURL: boolean = false) {
        switch (logType) {
          case 'NetworkSniffing': {
            if (isURL) {
                var newLength = this.networkURLLogs.push(...logs)
                if (newLength + this.networkIPLogs.length >= this.LOGS_THRESHOLD) {
                  const updatedAgentData = this.agent.updateAgentDataLogs(fileId, this.networkURLLogs, "NetworkSniffing", isURL)
                  this.networkURLLogs = []
                }
            }
            else {
                var newLength = this.networkIPLogs.push(...logs)
                if (newLength + this.networkURLLogs.length >= this.LOGS_THRESHOLD) {
                  const updatedAgentData = this.agent.updateAgentDataLogs(fileId, this.networkIPLogs, "NetworkSniffing")
                  this.networkIPLogs = []
                }

            }
            break
          }
          case 'RansomwareDetection': {
            this.ransomwareDetectionLogs.push(...logs)
            if (newLength >= this.LOGS_THRESHOLD) {
              const updatedAgentData = this.agent.updateAgentDataLogs(fileId, this.ransomwareDetectionLogs, "RansomwareDetection")
              this.ransomwareDetectionLogs = []
            }
            break
          }
        }
      }
}