import { server as WebSocketServer } from 'websocket';
import * as http from 'http';
import { AgentService } from '../agent.service';

export class AgentsWebSocketServer {
    private wsServer: WebSocketServer;
    private agents = [];

    private networkLogs: string[] = []
    private ransomwareDetectionLogs: string[] = []
  
    private logsThreshold = 10;

    constructor(port: number, private agent: AgentService) {
        const server = http.createServer((request, response) => {
            console.log((new Date()) + ' Received request for ' + request.url);
            response.writeHead(404);
            response.end();
        });
        server.listen(port, () => {
            console.log((new Date()) + ` Server is listening on port ${port}`);
        });

        this.wsServer = new WebSocketServer({
            httpServer: server,
            autoAcceptConnections: false
        });

        this.wsServer.on('request', (request) => {
            const connection = request.accept(null, request.origin);
            connection.on('message', (message) => this.handleMessage(message));
        });
    }

    private handleMessage(message) {
        if (message.type === 'utf8') {
            const receivedMsg = message.utf8Data
            console.log(`Message received => ${receivedMsg}`);

            const email = receivedMsg.split("#")[1]
            const fileId = receivedMsg.split("#")[2]
            const id = `${email}-${fileId}`

            try {
                // check if agent already started communication
                if (this.agents.includes(id)) {
                    // Data#a@gmail.com#dajskdalksd1jdskla#NetworkSniffing&["log1","log2","log3"]
                    if (String(receivedMsg).startsWith("Data")) {
                        const data = receivedMsg.split("#")[3]
                        const logType = data.split("&")[0]
                        const logs = data.split("&")[1]

                        // Process the message based on its type
                        switch (logType) {
                            case 'NetworkSniffing': {
                                console.log('NetworkSniffing logs:', logs);
                                const parsedLogs = logs.split("|")
                                this.pushLogsToDB(parsedLogs, "NetworkSniffing", fileId)
                                return;
                            }
                            case 'RansomwareDetection': {
                                console.log('RansomwareDetection logs:', logs);
                                const parsedLogs = logs.split("|")
                                this.pushLogsToDB(parsedLogs, "RansomwareDetection", fileId)
                                return;
                            }
                            default:
                                console.log('Unknown message type:', logType);
                                return
                        }
                    }
                }
                
                if (String(receivedMsg).startsWith("Start-Communication")) {
                    console.log("Started Websocket communication with " + id)
                    this.agents.push(id)
                    return
                }
                if (String(receivedMsg).startsWith("End-Communication")) {
                    this.agents = this.agents.filter(c => c !== id);
                    return
                }
            }
            catch (error) {
                console.error(error)
            }
        }

        console.log(message)
    }

    pushLogsToDB(logs: string[], log_type: string, fileId: string) {
        switch (log_type) {
          case 'NetworkSniffing': {
            var newLength = this.networkLogs.push(...logs);
            if (newLength >= this.logsThreshold) {
              const updatedAgentData = this.agent.updateAgentDataLogs(fileId, this.networkLogs, "NetworkSniffing");
              this.networkLogs = []
            }
            break;
          }
          case 'RansomwareDetection': {
            this.ransomwareDetectionLogs.push(...logs);
            if (newLength >= this.logsThreshold) {
              const updatedAgentData = this.agent.updateAgentDataLogs(fileId, this.ransomwareDetectionLogs, "RansomwareDetection")
              this.ransomwareDetectionLogs = []
            }
            break;
          }
        }
      }
}