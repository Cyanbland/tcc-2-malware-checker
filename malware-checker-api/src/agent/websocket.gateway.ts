// websocket.gateway.ts
import { WebSocketGateway, WebSocketServer, OnGatewayConnection, OnGatewayDisconnect, OnGatewayInit, SubscribeMessage, MessageBody } from '@nestjs/websockets';
import { Server, WebSocket } from 'ws';

@WebSocketGateway()
export class AppGateway implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {
  @WebSocketServer() server: Server;
  private agents: { [topic: string]: WebSocket[] } = {};

  handleConnection(agent: WebSocket, ...args: any[]) {
    console.log('agent connected:', agent);
  }

  handleDisconnect(agent: WebSocket) {
    console.log('agent disconnected:', agent);
    // Remove the agent WebSocket connection from all topics
    for (const topic of Object.keys(this.agents)) {
      this.agents[topic] = this.agents[topic].filter(c => c !== agent);
    }
  }

  @SubscribeMessage('subscribe')
  handleSubscribe(@MessageBody() topic: string, agent: WebSocket) {
    console.log('agent subscribed to topic:', topic);
    // Add the agent WebSocket connection to the specified topic
    if (!this.agents[topic]) {
      this.agents[topic] = [];
    }
    this.agents[topic].push(agent);
  }

  @SubscribeMessage('unsubscribe')
  handleUnsubscribe(@MessageBody() topic: string, agent: WebSocket) {
    console.log('agent unsubscribed from topic:', topic);
    // Remove the agent WebSocket connection from the specified topic
    if (this.agents[topic]) {
      this.agents[topic] = this.agents[topic].filter(c => c !== agent);
    }
  }

  @SubscribeMessage('message')
  handleMessage(@MessageBody() { topic, data }: { topic: string, data: any }) {
    console.log(`Received message on topic ${topic}:`, data);
    // Forward the received message to all agents subscribed to the specified topic
    if (this.agents[topic]) {
      for (const agent of this.agents[topic]) {
        agent.send(data);
      }
    }
  }

  afterInit(server: Server) {
    console.log('WebSocket server initialized');
  }
}
