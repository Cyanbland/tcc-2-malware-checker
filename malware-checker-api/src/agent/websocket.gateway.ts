import { WebSocketGateway, OnGatewayConnection, OnGatewayDisconnect, OnGatewayInit, SubscribeMessage, MessageBody } from '@nestjs/websockets';
import { Socket } from 'ws';
import { AgentService } from './agent.service';

interface MessageData {
  fileId: string;
  type: string; // 'NetworkSniffing' or 'RansomwareDetection'
  logs: string[]
}

@WebSocketGateway({ cors:{
	origin: "*"
}, transports: ['websocket'] })
export class AppGateway implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {
  constructor(private agent: AgentService) {}

  private agents: Socket[] = [];

  private networkLogs: string[] = []
  private ransomwareDetectionLogs: string[] = []

  private logsThreshold = 10;

  afterInit() {
    console.log('Socket.IO server initialized');
  }

  handleConnection(client: Socket) {
    console.log('Agent connected:', client.id);
    this.agents.push(client);
  }

  handleDisconnect(client: Socket) {
    console.log('Agent disconnected:', client.id);
    this.agents = this.agents.filter(c => c !== client);
  }

  @SubscribeMessage('message')
  handleMessage(client: Socket, @MessageBody() data: MessageData) {
    console.log('Received message from agent:', data);
    // Process the message based on its type
    switch (data.type) {
      case 'NetworkSniffing':
        console.log('NetworkSniffing data:', data);
        this.pushLogsToDB(data.logs, "NetworkSniffing", data.fileId)
        break;
      case 'RansomwareDetection':
        console.log('RansomwareDetection data:', data);
        this.pushLogsToDB(data.logs, "RansomwareDetection", data.fileId)
        break;
      default:
        console.log('Unknown message type:', data.type);
    }
  }


  pushLogsToDB(logs: string[], log_type: string, fileId: string) {
    switch (log_type) {
      case 'NetworkSniffing': {
        var newLength = this.networkLogs.push(...logs);
        if (newLength >= this.logsThreshold) {
          const updatedAgentData = this.agent.updateAgentDataLogs(fileId, this.networkLogs, "NetworkSniffing");
        }
        break;
      }
      case 'RansomwareDetection': {
        this.ransomwareDetectionLogs.push(...logs);
        if (newLength >= this.logsThreshold) {
          const updatedAgentData = this.agent.updateAgentDataLogs(fileId, this.ransomwareDetectionLogs, "RansomwareDetection")
        }
        break;
      }
    }
  }
}
