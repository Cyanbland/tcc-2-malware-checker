// websocket.gateway.ts
import { WebSocketGateway, WebSocketServer, OnGatewayConnection, OnGatewayDisconnect, OnGatewayInit, SubscribeMessage, MessageBody } from '@nestjs/websockets';
import { Server, WebSocket } from 'ws';
import { AgentService } from './agent.service';

interface MessageData {
  fileId: string;
  type: string; // 'NetworkSniffing' or 'RansomwareDetection'
  logs: string[]
}

@WebSocketGateway()
export class AppGateway implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {
	constructor(private agent: AgentService) {}
	
	@WebSocketServer() server: Server;
	private agents: WebSocket[] = [];

	private networkLogs: string[] = []
	private ransomwareDetectionLogs: string[] = []

	private logsThreshold = 10;


	handleConnection(client: WebSocket, ...args: any[]) {
		console.log('Agent connected:', client);
		this.agents.push(client);
	}

	handleDisconnect(client: WebSocket) {
		console.log('Agent disconnected:', client);
		this.agents = this.agents.filter(c => c !== client);
	}

	@SubscribeMessage('message')
	handleMessage(@MessageBody() data: MessageData) {
		console.log('Received message from agent:', data);
		// Process the message based on its type
		switch (data.type) {
			case 'NetworkSniffing':
                console.log('NetworkSniffing data:', data);
				this.pushLogsToDB(data.logs, "NetworkSniffing", data.fileId)
				break;
			case 'RansomwareDetection':
				console.log('RansomwareDetection data:', data);
                this.pushLogsToDB(data.logs, "RansomwareDetection", data.fileId)
			    break;
			default:
				console.log('Unknown message type:', data.type);
		}
	}

	afterInit(server: Server) {
		console.log('WebSocket server initialized');
	}

	pushLogsToDB(logs: string[], log_type: string, fileId: string) {
        switch (log_type) {
            case 'NetworkSniffing': {
                var newLength = this.networkLogs.push(...logs);
                if (newLength >= this.logsThreshold) {
                    const updatedAgentData = this.agent.updateAgentDataLogs(fileId, this.networkLogs, "NetworkSniffing");
                }
                break;
            }
            case 'RansomwareDetection': {
                this.ransomwareDetectionLogs.push(...logs);
                if (newLength >= this.logsThreshold) {
                    const updatedAgentData = this.agent.updateAgentDataLogs(fileId, this.ransomwareDetectionLogs, "RansomwareDetection")
                }
                break;
            }
        }
	}
}