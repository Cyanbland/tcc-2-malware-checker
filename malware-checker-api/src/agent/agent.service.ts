import { ForbiddenException, Injectable, PreconditionFailedException } from '@nestjs/common';
import { v4 as uuidv4 } from 'uuid';
import { ConfigurationService } from '../configuration/configuration.service';
import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';

@Injectable()
export class AgentService {
    constructor(private configuration: ConfigurationService) {}

    async generateEnrollmentToken(email: string, fileId: string) {       
        const token = `${email}-${fileId}-${uuidv4()}`;

        const newUserConfiguration = await this.configuration.updateEnrollmentToken(email, token)

        return { token };
    }

    async validateEnrollmentToken(token: string) {
        try {
            const email = String(token).split("-")[0]
            const configuration = await this.configuration.getMyConfig(email)

            if (!configuration) {
                throw new PreconditionFailedException("Invalid Token!")
            }

            if (token !== configuration.enrollmentToken) {
                throw new PreconditionFailedException("Enrollment Token is incorrect!")
            }
    
            return { success: true }
        }
        catch (error) {
            if (error instanceof PrismaClientKnownRequestError) {
                // "The record searched for in the where condition ({model_name}.{argument_name} = {argument_value}) does not exist"
                if (error.code === 'P2001') {
                    throw new ForbiddenException("Enrollment Token is incorrect")
                }
            }

            throw error;
        }
    }
}
