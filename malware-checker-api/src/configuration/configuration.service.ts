import { ForbiddenException, Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';

@Injectable()
export class ConfigurationService {
    constructor(private prisma: PrismaService) {}

    async createConfig(userId: string) {
        return await this.prisma.configuration.create({
            data: {
                userId
            }
        })
    }

    async toggleYaraAnalysis(email: string) {
        try {
            const user = await this.prisma.user.findUnique({
                where: {
                    email
                }
            })

            const config = await this.prisma.configuration.findUnique({
                where: {
                    userId: user.id
                }
            })

            return await this.prisma.configuration.update({
                where: {
                    userId: user.id
                },
                data: {
                    enableYaraAnalysis: !config.enableYaraAnalysis
                }
            })
        }
        catch (error) {
            if (error instanceof PrismaClientKnownRequestError) {
                throw new NotFoundException(error.message);
            }
        }
    }

    async toggleFuzzyHashingAnalysis(email: string) {
        try {
            const user = await this.prisma.user.findUnique({
                where: {
                    email
                }
            })

            const config = await this.prisma.configuration.findUnique({
                where: {
                    userId: user.id
                }
            })

            return await this.prisma.configuration.update({
                where: {
                    userId: user.id
                },
                data: {
                    enableFuzzyHashingAnalysis: !config.enableFuzzyHashingAnalysis
                }
            })
        }
        catch (error) {
            if (error instanceof PrismaClientKnownRequestError) {
                throw new NotFoundException(error.message);
            }
        }
    }

    async toggleImportHashingAnalysis(email: string) {
        try {
            const user = await this.prisma.user.findUnique({
                where: {
                    email
                }
            })

            const config = await this.prisma.configuration.findUnique({
                where: {
                    userId: user.id
                }
            })

            return await this.prisma.configuration.update({
                where: {
                    userId: user.id
                },
                data: {
                    enableImportHashingAnalysis: !config.enableImportHashingAnalysis
                }
            })
        }
        catch (error) {
            if (error instanceof PrismaClientKnownRequestError) {
                throw new NotFoundException(error.message);
            }
        }
    }

    async getMyConfig(email: string) {
        try {
            const user = await this.prisma.user.findUnique({
                where: {
                    email
                }
            })
            
            if (!user) {
                throw new NotFoundException("User not found!")
            }

            const configuration = await this.prisma.configuration.findUnique({
                where: {
                    userId: user.id
                }
            })

            return configuration
        }

        catch (error) {
            if (error instanceof PrismaClientKnownRequestError) {
                // "The record searched for in the where condition ({model_name}.{argument_name} = {argument_value}) does not exist"
                if (error.code === 'P2001') {
                    throw new ForbiddenException("Credentials are incorrect")
                }
            }
        }
    }
}
