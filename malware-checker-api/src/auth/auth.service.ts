import { ForbiddenException, Injectable, UseGuards } from "@nestjs/common";
import { PrismaService } from "../prisma/prisma.service";
import { AuthDto, RegisterDto } from "./dto";
import * as argon from 'argon2'
import { PrismaClientKnownRequestError } from "@prisma/client/runtime/library";
import { JwtService } from "@nestjs/jwt";
import { ConfigService } from "@nestjs/config";

@Injectable()
export class AuthService{
    constructor(private prisma: PrismaService, private jwt: JwtService, private config: ConfigService) {}

    async signup(dto: RegisterDto) {
        const hash = await argon.hash(dto.password)

        try {
            let data = {
                email: dto.email,
                hash,
                firstName: "",
                lastName: ""
            }

            if (dto.firstName) data.firstName = dto.firstName
            if (dto.lastName) data.lastName = dto.lastName

            const user = await this.prisma.user.create({
                data
            })

            return this.signToken(user.id, user.email)
        }
        catch(error) {
            if (error instanceof PrismaClientKnownRequestError) {
                // duplicate field
                if (error.code === 'P2002') {
                    throw new ForbiddenException('Credentials already in use')
                }
            }
        }
    }

    async login(dto: AuthDto) {
        const user = await this.prisma.user.findUnique({
            where: {
                email: dto.email
            }
        })
        if (!user) throw new ForbiddenException('Credentials are incorrect')

        const pwMatches = await argon.verify(user.hash, dto.password)
        if (!pwMatches) throw new ForbiddenException('Credentials are incorrect')

        return this.signToken(user.id, user.email)
    }

    async signToken(userId: string, email: string): Promise<{ access_token: string }> {
        const payload = {
            sub: userId,
            email
        }
        const secret = this.config.get("JWT_SECRET")
        const token = await this.jwt.signAsync(payload, {
            expiresIn: '45m',
            secret: secret
        })

        return {
            access_token: token
        }
    }

}