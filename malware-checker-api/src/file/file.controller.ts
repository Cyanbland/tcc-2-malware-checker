import { Body, Controller, Delete, Get, HttpCode, HttpStatus, ParseFilePipe, Post, UploadedFile, UseGuards, UseInterceptors } from '@nestjs/common';
import { JwtGuard } from '../auth/guard';
import { FileInterceptor } from '@nestjs/platform-express';
import { FileService } from './file.service';
import { storage } from './storage.config';
import { GetUser } from '../auth/decorator';
import { AnalysisDto, AnalysisWithSourceDto } from './dto/file.dto';



const MAX_FILE_SIZE = 200 * 1024 * 1024 // 100 MB

@Controller('files')
@UseGuards(JwtGuard)
export class FileController {
    constructor(private fileService: FileService) {}

    @Post('upload')
    @UseInterceptors(FileInterceptor('file', {
        storage: storage,
        limits: {
            fileSize: MAX_FILE_SIZE
        }
    }))
    uploadFile(@GetUser('email') email: string, @UploadedFile(new ParseFilePipe({fileIsRequired: true})) file: Express.Multer.File) {
        console.log(file)
        return this.fileService.addFileToUser(file, email)
    }

    @Get('list-files')
    listFiles(@GetUser('email') email: string) {
        return this.fileService.getFilesFromUser(email)
    }

    @HttpCode(HttpStatus.OK)
    @Delete('delete-file')
    deleteFile(@GetUser('email') email: string, @Body() dto: AnalysisDto) {
        return this.fileService.deleteFileAndItsAnalysis(email, dto.fileId)
    }

    @Get('analysis-history')
    analysisHistory(@GetUser('email') email: string) {
        return this.fileService.analysisHistoryFromUser(email)
    }

    // automatically get all subscribed YARA sources
    @HttpCode(HttpStatus.OK)
    @Post('run-yara-analysis')
    runYaraAnalysis(@GetUser('email') email: string, @Body() dto: AnalysisDto) {
        return this.fileService.analyzeFileWithSubscribedYaraSources(email, dto.fileId)
    }

    @HttpCode(HttpStatus.OK)
    @Post('run-fuzzy-hashing-analysis')
    runFuzzyHashingAnalysis(@GetUser('email') email: string, @Body() dto: AnalysisDto) {
        return this.fileService.analyzeFileWithFuzzyHashing(email, dto.fileId)
    }

    @HttpCode(HttpStatus.OK)
    @Get('run-yara-analysis-with-source')
    runYaraAnalysisWithSource(@GetUser('email') email: string, @Body() dto: AnalysisWithSourceDto) {

    }
}
