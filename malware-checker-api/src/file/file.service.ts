import { Injectable, NotAcceptableException, NotFoundException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';

@Injectable()
export class FileService {
    constructor(private prisma: PrismaService) {}
    
    async addFileToUser(file: Express.Multer.File, email: string) {
        try {
            const user = await this.prisma.user.findUnique({
                where: {
                    email
                }
            })
            
            let data = {
                storedName: file.filename,
                originalName: file.originalname,
                type: file.mimetype,
                length: file.size,
                location: file.path,
                userId: user.id
            }
            
            const createdFile = await this.prisma.file.create({data})
            delete createdFile.location
            return createdFile
        }
        catch(error) {
            if (error instanceof PrismaClientKnownRequestError) {
                throw new NotAcceptableException(error.message)
            }
        }
    }

    // list all files from user
    async getFilesFromUser(email: string) {
        try {
            const user = await this.prisma.user.findUnique({
                where: {
                    email
                }
            })

            const files = await this.prisma.file.findMany({ 
                where: {
                    userId: user.id
                },
                orderBy: {
                    createdAt: 'desc'
                }
            })

            return files
        }
        catch(error) {
            if (error instanceof PrismaClientKnownRequestError) {
                throw new NotFoundException(error.message)
            }
        }
    }
}



// run YARA on file