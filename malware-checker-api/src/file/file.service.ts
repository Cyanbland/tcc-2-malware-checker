import { Injectable, NotAcceptableException, NotFoundException, PreconditionFailedException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';
import { File, YaraRule, YaraRuleSourcesOnUsers } from '@prisma/client';
import { resolve } from 'path';
import { spawn } from 'child_process';
import { cwd } from 'process';

@Injectable()
export class FileService {
    constructor(private prisma: PrismaService) {}

    private YARA_CLI_PATH = resolve(__dirname, "../../yara")
    
    async addFileToUser(file: Express.Multer.File, email: string) {
        try {
            const user = await this.prisma.user.findUnique({
                where: {
                    email
                }
            })
            let rootProjectFolder = resolve(__dirname, '../../')
            let data = {
                storedName: file.filename,
                originalName: file.originalname,
                type: file.mimetype,
                length: file.size,
                location: `${rootProjectFolder}/${file.path}`,
                userId: user.id
            }
            
            const createdFile = await this.prisma.file.create({data})
            delete createdFile.location
            return createdFile
        }
        catch(error) {
            if (error instanceof PrismaClientKnownRequestError) {
                throw new NotAcceptableException(error.message)
            }
        }
    }

    // list all files from user
    async getFilesFromUser(email: string) {
        try {
            const user = await this.prisma.user.findUnique({
                where: {
                    email
                }
            })

            const files = await this.prisma.file.findMany({ 
                where: {
                    userId: user.id
                },
                orderBy: {
                    createdAt: 'desc'
                },
            })

            files.forEach((file) => {
                delete file.location
            })

            return files
        }
        catch(error) {
            if (error instanceof PrismaClientKnownRequestError) {
                throw new NotFoundException(error.message)
            }
        }
    }

    async analyzeFileWithSubscribedYaraSources(email: string, fileId: string) {
        const user = await this.prisma.user.findUnique({
            where: {
                email
            }
        })
        
        const file = await this.prisma.file.findUnique({
            where: {
                id: fileId,
            }
        }) 

        if (!file || file.userId != user.id) {
            throw new NotFoundException("File not found")
        }

        const subscribedYaraSources = await this.prisma.yaraRuleSourcesOnUsers.findMany({
            where: {
                userId: user.id,
            }
        })

        if (!subscribedYaraSources.length) {
            throw new PreconditionFailedException("User is not subscribed to any YARA Sources")
        }
        try {
            subscribedYaraSources.forEach(async (source: YaraRuleSourcesOnUsers) => {
                const rulesWithSource = await this.prisma.yaraRuleSource.findMany({
                    select: {
                        name: true,
                        rules: true
                    },
                    where: {
                        id: source.sourceId
                    }
                })

                let analys_result = {
                    sources_triggered: [],
                    triggered_rules: []
                }
                rulesWithSource.forEach(async (current_source) => {
                    const {name, rules } = current_source
                    rules.forEach(async (rule: YaraRule) => {
                        let current_analysis = await this.runYaraRulesOnFileObject(rule, file)
                        if (current_analysis) { console.log( current_analysis )}
                        // append current analysis and update the file obj on DB
                    })
                })
            })

            //return file object with updated characteristics

            return true
        }
        catch(error) {
            if (error instanceof PrismaClientKnownRequestError) {
                throw new NotFoundException(error.message)
            }
        }
    }

    async analyzeFileWithSpecificSource(fileId: string, sourceId: string) {

    }

    async runYaraRulesOnFileObject(rule: YaraRule, file: File) {
        let yaraCommand =  `${this.YARA_CLI_PATH}/yara64.exe ${rule.path} ${file.location}` 
        console.log(yaraCommand)

        let detections = []

        try {
            const ex = spawn(yaraCommand)

            ex.stdout.on("data", data => {
                console.log(`stdout: ${data}`);
                detections.push(data)
            });
            
            ex.stderr.on("data", data => {
                console.log(`stderr: ${data}`);
            });
            
            ex.on('error', (error) => {
                console.log(`error: ${error.message}`);
            });
            
            ex.on("close", code => {
                //console.log(`child process exited with code ${code}`);
            });

            return detections
        }
        catch(error) {
            if (error instanceof PrismaClientKnownRequestError) {
                throw new NotFoundException(error.message)
            }
        }
    }
}

